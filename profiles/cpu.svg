<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="293" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="293" > </text>
<g id="frames">
<g >
<title>runtime.typePointers.next (2 samples, 0.07%)</title><rect x="80.8" y="165" width="0.7" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="83.75" y="175.5" ></text>
</g>
<g >
<title>runtime.park_m (5 samples, 0.17%)</title><rect x="81.5" y="229" width="2.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="84.54" y="239.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocker).tryAcquire (1 samples, 0.03%)</title><rect x="10.0" y="213" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func3 (2 samples, 0.07%)</title><rect x="11.6" y="181" width="0.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="14.57" y="191.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (3 samples, 0.10%)</title><rect x="83.5" y="213" width="1.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="86.50" y="223.5" ></text>
</g>
<g >
<title>runtime.scanblock (20 samples, 0.67%)</title><rect x="17.5" y="149" width="7.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="20.47" y="159.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).init (1 samples, 0.03%)</title><rect x="15.1" y="149" width="0.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="18.11" y="159.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).dispose (1 samples, 0.03%)</title><rect x="10.4" y="149" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="13.39" y="159.5" ></text>
</g>
<g >
<title>runtime.typePointers.nextFast (4 samples, 0.13%)</title><rect x="78.0" y="181" width="1.6" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="81.00" y="191.5" ></text>
</g>
<g >
<title>runtime.findRunnable (1 samples, 0.03%)</title><rect x="83.5" y="181" width="0.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="86.50" y="191.5" ></text>
</g>
<g >
<title>runtime/internal/atomic.(*Int32).CompareAndSwap (1 samples, 0.03%)</title><rect x="84.3" y="197" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="87.29" y="207.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (181 samples, 6.03%)</title><rect x="10.4" y="245" width="71.1" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="13.39" y="255.5" >runtime...</text>
</g>
<g >
<title>runtime.schedule (5 samples, 0.17%)</title><rect x="81.5" y="213" width="2.0" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="84.54" y="223.5" ></text>
</g>
<g >
<title>runtime.(*stkframe).getStackMap (3 samples, 0.10%)</title><rect x="16.3" y="117" width="1.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="19.29" y="127.5" ></text>
</g>
<g >
<title>runtime.funcspdelta (2 samples, 0.07%)</title><rect x="15.5" y="117" width="0.8" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="18.50" y="127.5" ></text>
</g>
<g >
<title>brc/cmd.splitLine (153 samples, 5.10%)</title><rect x="313.5" y="197" width="60.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="316.45" y="207.5" >brc/cm..</text>
</g>
<g >
<title>runtime.spanOf (3 samples, 0.10%)</title><rect x="24.2" y="133" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="27.15" y="143.5" ></text>
</g>
<g >
<title>os.(*File).pread (58 samples, 1.93%)</title><rect x="1161.7" y="197" width="22.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1164.70" y="207.5" >o..</text>
</g>
<g >
<title>runtime.tgkill (2 samples, 0.07%)</title><rect x="13.9" y="117" width="0.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="16.93" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (173 samples, 5.76%)</title><rect x="13.5" y="229" width="68.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="16.54" y="239.5" >runtime..</text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.03%)</title><rect x="83.9" y="165" width="0.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="86.90" y="175.5" ></text>
</g>
<g >
<title>runtime.futex (2 samples, 0.07%)</title><rect x="11.6" y="85" width="0.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="14.57" y="95.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (58 samples, 1.93%)</title><rect x="47.7" y="165" width="22.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="50.73" y="175.5" >r..</text>
</g>
<g >
<title>brc/cmd.updateMap (2,005 samples, 66.79%)</title><rect x="373.6" y="197" width="788.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="376.59" y="207.5" >brc/cmd.updateMap</text>
</g>
<g >
<title>github.com/cespare/xxhash.Sum64 (1,387 samples, 46.20%)</title><rect x="616.1" y="181" width="545.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="619.12" y="191.5" >github.com/cespare/xxhash.Sum64</text>
</g>
<g >
<title>runtime.findObject (2 samples, 0.07%)</title><rect x="23.4" y="133" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="26.36" y="143.5" ></text>
</g>
<g >
<title>runtime.pcvalue (2 samples, 0.07%)</title><rect x="16.7" y="85" width="0.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="19.68" y="95.5" ></text>
</g>
<g >
<title>runtime.(*randomEnum).next (2 samples, 0.07%)</title><rect x="81.5" y="181" width="0.8" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="84.54" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (1 samples, 0.03%)</title><rect x="80.4" y="165" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="83.36" y="175.5" ></text>
</g>
<g >
<title>runtime.markroot (2 samples, 0.07%)</title><rect x="79.6" y="181" width="0.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="82.57" y="191.5" ></text>
</g>
<g >
<title>runtime.preemptM (2 samples, 0.07%)</title><rect x="13.9" y="149" width="0.8" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="16.93" y="159.5" ></text>
</g>
<g >
<title>runtime.greyobject (1 samples, 0.03%)</title><rect x="80.0" y="101" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="82.97" y="111.5" ></text>
</g>
<g >
<title>runtime.setGCPhase (1 samples, 0.03%)</title><rect x="1189.2" y="165" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1192.21" y="175.5" ></text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.03%)</title><rect x="11.2" y="213" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="14.18" y="223.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (3 samples, 0.10%)</title><rect x="16.3" y="133" width="1.2" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="19.29" y="143.5" ></text>
</g>
<g >
<title>runtime.gcDrain (168 samples, 5.60%)</title><rect x="13.5" y="197" width="66.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="16.54" y="207.5" >runtime..</text>
</g>
<g >
<title>runtime.typePointers.nextFast (19 samples, 0.63%)</title><rect x="70.5" y="165" width="7.5" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="73.53" y="175.5" ></text>
</g>
<g >
<title>runtime.(*gcWork).balance (2 samples, 0.07%)</title><rect x="13.9" y="181" width="0.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="16.93" y="191.5" ></text>
</g>
<g >
<title>runtime.addb (8 samples, 0.27%)</title><rect x="41.8" y="165" width="3.2" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="44.84" y="175.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (1 samples, 0.03%)</title><rect x="83.1" y="133" width="0.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="86.11" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (1 samples, 0.03%)</title><rect x="1184.5" y="149" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1187.50" y="159.5" ></text>
</g>
<g >
<title>brc/cmd.main (2,584 samples, 86.08%)</title><rect x="173.9" y="213" width="1015.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="176.91" y="223.5" >brc/cmd.main</text>
</g>
<g >
<title>runtime.mcall (5 samples, 0.17%)</title><rect x="81.5" y="245" width="2.0" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="84.54" y="255.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (6 samples, 0.20%)</title><rect x="15.1" y="165" width="2.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="18.11" y="175.5" ></text>
</g>
<g >
<title>runtime.gcResetMarkState (1 samples, 0.03%)</title><rect x="1184.9" y="133" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1187.89" y="143.5" ></text>
</g>
<g >
<title>runtime.preemptall (1 samples, 0.03%)</title><rect x="10.8" y="165" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="13.79" y="175.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.03%)</title><rect x="83.9" y="181" width="0.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="86.90" y="191.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (1 samples, 0.03%)</title><rect x="10.4" y="165" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="13.39" y="175.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (19 samples, 0.63%)</title><rect x="608.6" y="117" width="7.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="611.65" y="127.5" ></text>
</g>
<g >
<title>runtime.(*stackScanState).addObject (1 samples, 0.03%)</title><rect x="79.6" y="117" width="0.4" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="82.57" y="127.5" ></text>
</g>
<g >
<title>gcWriteBarrier (24 samples, 0.80%)</title><rect x="606.7" y="181" width="9.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="609.68" y="191.5" ></text>
</g>
<g >
<title>runtime.scanobject (134 samples, 4.46%)</title><rect x="25.3" y="181" width="52.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="28.33" y="191.5" >runti..</text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerIdle (5 samples, 0.17%)</title><rect x="79.6" y="213" width="1.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="82.57" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.07%)</title><rect x="10.4" y="213" width="0.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="13.39" y="223.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination (2 samples, 0.07%)</title><rect x="11.6" y="213" width="0.8" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="14.57" y="223.5" ></text>
</g>
<g >
<title>runtime.signalM (1 samples, 0.03%)</title><rect x="10.8" y="133" width="0.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="13.79" y="143.5" ></text>
</g>
<g >
<title>runtime.bgsweep (1 samples, 0.03%)</title><rect x="10.0" y="245" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>runtime.stealWork (2 samples, 0.07%)</title><rect x="82.3" y="181" width="0.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="85.33" y="191.5" ></text>
</g>
<g >
<title>syscall.pread (58 samples, 1.93%)</title><rect x="1161.7" y="165" width="22.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1164.70" y="175.5" >s..</text>
</g>
<g >
<title>runtime.findRunnable (4 samples, 0.13%)</title><rect x="81.5" y="197" width="1.6" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="84.54" y="207.5" ></text>
</g>
<g >
<title>runtime.scanstack (2 samples, 0.07%)</title><rect x="79.6" y="149" width="0.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="82.57" y="159.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (1 samples, 0.03%)</title><rect x="1161.7" y="133" width="0.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1164.70" y="143.5" ></text>
</g>
<g >
<title>runtime.spanOf (4 samples, 0.13%)</title><rect x="614.5" y="101" width="1.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="617.54" y="111.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.forEachP.func6 (1 samples, 0.03%)</title><rect x="11.2" y="181" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="14.18" y="191.5" ></text>
</g>
<g >
<title>runtime.procyield (2 samples, 0.07%)</title><rect x="84.7" y="181" width="0.8" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="87.68" y="191.5" ></text>
</g>
<g >
<title>runtime.(*mcache).releaseAll (1 samples, 0.03%)</title><rect x="11.2" y="117" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="14.18" y="127.5" ></text>
</g>
<g >
<title>runtime.greyobject (2 samples, 0.07%)</title><rect x="46.2" y="165" width="0.7" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="49.16" y="175.5" ></text>
</g>
<g >
<title>runtime.packPallocSum (1 samples, 0.03%)</title><rect x="1184.5" y="37" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1187.50" y="47.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (23 samples, 0.77%)</title><rect x="607.1" y="165" width="9.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="610.08" y="175.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.03%)</title><rect x="83.5" y="149" width="0.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="86.50" y="159.5" ></text>
</g>
<g >
<title>fmt.Fprintf (1 samples, 0.03%)</title><rect x="1189.6" y="197" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1192.61" y="207.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (20 samples, 0.67%)</title><rect x="17.5" y="165" width="7.8" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="20.47" y="175.5" ></text>
</g>
<g >
<title>runtime.gcDrain (5 samples, 0.17%)</title><rect x="79.6" y="197" width="1.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="82.57" y="207.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).allocRange (1 samples, 0.03%)</title><rect x="1184.5" y="69" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1187.50" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (1 samples, 0.03%)</title><rect x="1184.5" y="117" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1187.50" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mcentral).uncacheSpan (1 samples, 0.03%)</title><rect x="11.2" y="101" width="0.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="14.18" y="111.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (2 samples, 0.07%)</title><rect x="10.4" y="181" width="0.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="13.39" y="191.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (1 samples, 0.03%)</title><rect x="11.2" y="165" width="0.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="14.18" y="175.5" ></text>
</g>
<g >
<title>runtime.scanobject (3 samples, 0.10%)</title><rect x="80.4" y="181" width="1.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="83.36" y="191.5" ></text>
</g>
<g >
<title>runtime.newArenaMayUnlock (1 samples, 0.03%)</title><rect x="11.2" y="53" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="14.18" y="63.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.07%)</title><rect x="11.6" y="197" width="0.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="14.57" y="207.5" ></text>
</g>
<g >
<title>fmt.(*pp).doPrintf (1 samples, 0.03%)</title><rect x="1189.6" y="181" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1192.61" y="191.5" ></text>
</g>
<g >
<title>fmt.Printf (1 samples, 0.03%)</title><rect x="1189.6" y="213" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1192.61" y="223.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.03%)</title><rect x="83.1" y="181" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="86.11" y="191.5" ></text>
</g>
<g >
<title>runtime.spanOf (1 samples, 0.03%)</title><rect x="47.3" y="165" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="50.34" y="175.5" ></text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.03%)</title><rect x="10.0" y="229" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (5 samples, 0.17%)</title><rect x="83.5" y="229" width="2.0" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="86.50" y="239.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.07%)</title><rect x="11.6" y="133" width="0.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="14.57" y="143.5" ></text>
</g>
<g >
<title>runtime.scanstack (5 samples, 0.17%)</title><rect x="15.5" y="149" width="2.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="18.50" y="159.5" ></text>
</g>
<g >
<title>runtime.lock2 (2 samples, 0.07%)</title><rect x="84.7" y="197" width="0.8" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="87.68" y="207.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (2 samples, 0.07%)</title><rect x="79.6" y="133" width="0.8" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="82.57" y="143.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue (2 samples, 0.07%)</title><rect x="16.7" y="101" width="0.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="19.68" y="111.5" ></text>
</g>
<g >
<title>runtime.scanblock (1 samples, 0.03%)</title><rect x="80.0" y="117" width="0.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="82.97" y="127.5" ></text>
</g>
<g >
<title>fmt.(*pp).printArg (1 samples, 0.03%)</title><rect x="1189.6" y="165" width="0.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1192.61" y="175.5" ></text>
</g>
<g >
<title>runtime.wakep (2 samples, 0.07%)</title><rect x="11.6" y="149" width="0.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="14.57" y="159.5" ></text>
</g>
<g >
<title>runtime.gopark (1 samples, 0.03%)</title><rect x="13.1" y="229" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="16.14" y="239.5" ></text>
</g>
<g >
<title>runtime.runqsteal (1 samples, 0.03%)</title><rect x="82.7" y="165" width="0.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="85.72" y="175.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (23 samples, 0.77%)</title><rect x="607.1" y="133" width="9.0" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="610.08" y="143.5" ></text>
</g>
<g >
<title>runtime.gcWriteBarrier2 (1 samples, 0.03%)</title><rect x="1161.3" y="181" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1164.31" y="191.5" ></text>
</g>
<g >
<title>runtime.newMarkBits (1 samples, 0.03%)</title><rect x="11.2" y="69" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="14.18" y="79.5" ></text>
</g>
<g >
<title>runtime.findObject (3 samples, 0.10%)</title><rect x="45.0" y="165" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="47.98" y="175.5" ></text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.03%)</title><rect x="83.1" y="149" width="0.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="86.11" y="159.5" ></text>
</g>
<g >
<title>runtime.wakep (1 samples, 0.03%)</title><rect x="83.9" y="197" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="86.90" y="207.5" ></text>
</g>
<g >
<title>runtime.(*gcBits).bitp (3 samples, 0.10%)</title><rect x="40.3" y="165" width="1.1" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="43.27" y="175.5" ></text>
</g>
<g >
<title>testing.tRunner (2,810 samples, 93.60%)</title><rect x="85.5" y="245" width="1104.5" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="88.47" y="255.5" >testing.tRunner</text>
</g>
<g >
<title>runtime.resetspinning (1 samples, 0.03%)</title><rect x="83.1" y="197" width="0.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="86.11" y="207.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone (5 samples, 0.17%)</title><rect x="11.2" y="229" width="1.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="14.18" y="239.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (168 samples, 5.60%)</title><rect x="13.5" y="213" width="66.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="16.54" y="223.5" >runtime..</text>
</g>
<g >
<title>runtime.gcMarkDone.forEachP.func5 (2 samples, 0.07%)</title><rect x="10.4" y="197" width="0.8" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="13.39" y="207.5" ></text>
</g>
<g >
<title>runtime.signalM (2 samples, 0.07%)</title><rect x="13.9" y="133" width="0.8" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="16.93" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.07%)</title><rect x="12.4" y="213" width="0.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="15.36" y="223.5" ></text>
</g>
<g >
<title>runtime.(*lfstack).pop (1 samples, 0.03%)</title><rect x="79.6" y="101" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="82.57" y="111.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (1 samples, 0.03%)</title><rect x="83.9" y="149" width="0.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="86.90" y="159.5" ></text>
</g>
<g >
<title>runtime/internal/syscall.Syscall6 (57 samples, 1.90%)</title><rect x="1162.1" y="117" width="22.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1165.09" y="127.5" >r..</text>
</g>
<g >
<title>runtime.markBits.isMarked (2 samples, 0.07%)</title><rect x="607.9" y="117" width="0.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="610.86" y="127.5" ></text>
</g>
<g >
<title>runtime.forEachG (1 samples, 0.03%)</title><rect x="1184.9" y="117" width="0.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1187.89" y="127.5" ></text>
</g>
<g >
<title>runtime.(*gcBits).bitp (2 samples, 0.07%)</title><rect x="607.1" y="117" width="0.8" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="610.08" y="127.5" ></text>
</g>
<g >
<title>runtime.preemptM (1 samples, 0.03%)</title><rect x="10.8" y="149" width="0.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="13.79" y="159.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).initAt (1 samples, 0.03%)</title><rect x="15.1" y="133" width="0.4" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="18.11" y="143.5" ></text>
</g>
<g >
<title>runtime.findObject (11 samples, 0.37%)</title><rect x="610.2" y="101" width="4.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="613.22" y="111.5" ></text>
</g>
<g >
<title>syscall.RawSyscall6 (57 samples, 1.90%)</title><rect x="1162.1" y="133" width="22.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1165.09" y="143.5" >s..</text>
</g>
<g >
<title>runtime.markroot.func1 (2 samples, 0.07%)</title><rect x="79.6" y="165" width="0.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="82.57" y="175.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).alloc (1 samples, 0.03%)</title><rect x="1184.5" y="85" width="0.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1187.50" y="95.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (2 samples, 0.07%)</title><rect x="84.7" y="213" width="0.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="87.68" y="223.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="1184.5" y="133" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1187.50" y="143.5" ></text>
</g>
<g >
<title>runtime.futex (1 samples, 0.03%)</title><rect x="83.9" y="133" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="86.90" y="143.5" ></text>
</g>
<g >
<title>runtime.futex (1 samples, 0.03%)</title><rect x="83.5" y="117" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="86.50" y="127.5" ></text>
</g>
<g >
<title>runtime.pcvalue (2 samples, 0.07%)</title><rect x="15.5" y="101" width="0.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="18.50" y="111.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="11.2" y="197" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="14.18" y="207.5" ></text>
</g>
<g >
<title>runtime.forEachP (2 samples, 0.07%)</title><rect x="10.4" y="229" width="0.8" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="13.39" y="239.5" ></text>
</g>
<g >
<title>runtime.gcStart (1 samples, 0.03%)</title><rect x="1184.9" y="165" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1187.89" y="175.5" ></text>
</g>
<g >
<title>runtime.futex (1 samples, 0.03%)</title><rect x="83.1" y="117" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="86.11" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (1 samples, 0.03%)</title><rect x="1184.5" y="101" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1187.50" y="111.5" ></text>
</g>
<g >
<title>runtime.readvarint (1 samples, 0.03%)</title><rect x="16.7" y="69" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="19.68" y="79.5" ></text>
</g>
<g >
<title>runtime.startm (1 samples, 0.03%)</title><rect x="83.1" y="165" width="0.4" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="86.11" y="175.5" ></text>
</g>
<g >
<title>brc/cmd.createFixedPoint (225 samples, 7.50%)</title><rect x="85.5" y="213" width="88.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="88.47" y="223.5" >brc/cmd.cr..</text>
</g>
<g >
<title>all (3,002 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>runtime.readUintptr (1 samples, 0.03%)</title><rect x="46.9" y="165" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="49.95" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mcache).allocLarge (1 samples, 0.03%)</title><rect x="1184.5" y="165" width="0.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1187.50" y="175.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (1 samples, 0.03%)</title><rect x="83.5" y="133" width="0.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="86.50" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (1 samples, 0.03%)</title><rect x="41.4" y="165" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="44.45" y="175.5" ></text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (1 samples, 0.03%)</title><rect x="11.2" y="85" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="14.18" y="95.5" ></text>
</g>
<g >
<title>syscall.Syscall6 (58 samples, 1.93%)</title><rect x="1161.7" y="149" width="22.8" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1164.70" y="159.5" >s..</text>
</g>
<g >
<title>runtime.morestack (5 samples, 0.17%)</title><rect x="83.5" y="245" width="2.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="86.50" y="255.5" ></text>
</g>
<g >
<title>runtime.makeslice (13 samples, 0.43%)</title><rect x="1184.5" y="197" width="5.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1187.50" y="207.5" ></text>
</g>
<g >
<title>runtime.markroot (27 samples, 0.90%)</title><rect x="14.7" y="181" width="10.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="17.72" y="191.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).update (1 samples, 0.03%)</title><rect x="1184.5" y="53" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1187.50" y="63.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func3 (2 samples, 0.07%)</title><rect x="12.4" y="197" width="0.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="15.36" y="207.5" ></text>
</g>
<g >
<title>runtime.gcstopm (1 samples, 0.03%)</title><rect x="83.5" y="165" width="0.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="86.50" y="175.5" ></text>
</g>
<g >
<title>syscall.Pread (58 samples, 1.93%)</title><rect x="1161.7" y="181" width="22.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1164.70" y="191.5" >s..</text>
</g>
<g >
<title>runtime.step (1 samples, 0.03%)</title><rect x="17.1" y="69" width="0.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="20.08" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mcache).prepareForSweep (1 samples, 0.03%)</title><rect x="11.2" y="133" width="0.4" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="14.18" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (23 samples, 0.77%)</title><rect x="607.1" y="149" width="9.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="610.08" y="159.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (2 samples, 0.07%)</title><rect x="11.6" y="101" width="0.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="14.57" y="111.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func4 (1 samples, 0.03%)</title><rect x="11.2" y="149" width="0.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="14.18" y="159.5" ></text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.03%)</title><rect x="83.5" y="197" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="86.50" y="207.5" ></text>
</g>
<g >
<title>runtime.findObject (2 samples, 0.07%)</title><rect x="12.4" y="165" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="15.36" y="175.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointersChunked (10 samples, 0.33%)</title><rect x="1185.3" y="165" width="3.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1188.28" y="175.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).next (2 samples, 0.07%)</title><rect x="15.5" y="133" width="0.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="18.50" y="143.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.03%)</title><rect x="1184.9" y="149" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1187.89" y="159.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (2 samples, 0.07%)</title><rect x="11.6" y="165" width="0.8" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="14.57" y="175.5" ></text>
</g>
<g >
<title>brc/cmd.TestMain (2,810 samples, 93.60%)</title><rect x="85.5" y="229" width="1104.5" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="88.47" y="239.5" >brc/cmd.TestMain</text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (2 samples, 0.07%)</title><rect x="13.9" y="165" width="0.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="16.93" y="175.5" ></text>
</g>
<g >
<title>runtime.tgkill (1 samples, 0.03%)</title><rect x="10.8" y="117" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="13.79" y="127.5" ></text>
</g>
<g >
<title>runtime.findfunc (1 samples, 0.03%)</title><rect x="15.1" y="117" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="18.11" y="127.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.07%)</title><rect x="11.6" y="117" width="0.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="14.57" y="127.5" ></text>
</g>
<g >
<title>runtime.mallocgc (13 samples, 0.43%)</title><rect x="1184.5" y="181" width="5.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1187.50" y="191.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (9 samples, 0.30%)</title><rect x="1185.7" y="149" width="3.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1188.68" y="159.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (2 samples, 0.07%)</title><rect x="12.4" y="181" width="0.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="15.36" y="191.5" ></text>
</g>
</g>
</svg>

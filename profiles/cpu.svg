<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>brc/cmd.updateMap (1,133 samples, 43.16%)</title><rect x="504.9" y="181" width="509.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="507.93" y="191.5" >brc/cmd.updateMap</text>
</g>
<g >
<title>brc/cmd.splitLine (190 samples, 7.24%)</title><rect x="419.5" y="181" width="85.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="422.52" y="191.5" >brc/cmd.sp..</text>
</g>
<g >
<title>runtime.(*gcWork).balance (4 samples, 0.15%)</title><rect x="11.8" y="165" width="1.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="14.80" y="175.5" ></text>
</g>
<g >
<title>runtime.park_m (6 samples, 0.23%)</title><rect x="93.2" y="213" width="2.7" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="96.16" y="223.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerDedicated (175 samples, 6.67%)</title><rect x="11.8" y="197" width="78.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="14.80" y="207.5" >runtime.g..</text>
</g>
<g >
<title>runtime.spanOf (2 samples, 0.08%)</title><rect x="19.9" y="117" width="0.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="22.89" y="127.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="11.3" y="197" width="0.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="14.35" y="207.5" ></text>
</g>
<g >
<title>gcWriteBarrier (39 samples, 1.49%)</title><rect x="728.8" y="165" width="17.5" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="731.79" y="175.5" ></text>
</g>
<g >
<title>runtime.markBits.isMarked (1 samples, 0.04%)</title><rect x="731.0" y="101" width="0.5" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="734.04" y="111.5" ></text>
</g>
<g >
<title>runtime.gcStart.func2 (2 samples, 0.08%)</title><rect x="1181.9" y="117" width="0.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="1184.91" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (1 samples, 0.04%)</title><rect x="90.5" y="149" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="93.46" y="159.5" ></text>
</g>
<g >
<title>runtime.readgstatus (1 samples, 0.04%)</title><rect x="21.2" y="165" width="0.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="24.24" y="175.5" ></text>
</g>
<g >
<title>runtime.(*mspan).base (1 samples, 0.04%)</title><rect x="49.1" y="149" width="0.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="52.11" y="159.5" ></text>
</g>
<g >
<title>runtime.gcDrain (175 samples, 6.67%)</title><rect x="11.8" y="181" width="78.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="14.80" y="191.5" >runtime.g..</text>
</g>
<g >
<title>runtime.makeslice (21 samples, 0.80%)</title><rect x="1180.6" y="181" width="9.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1183.56" y="191.5" ></text>
</g>
<g >
<title>brc/cmd.main (2,182 samples, 83.12%)</title><rect x="209.1" y="197" width="980.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="212.14" y="207.5" >brc/cmd.main</text>
</g>
<g >
<title>runtime.procyield (1 samples, 0.04%)</title><rect x="95.4" y="149" width="0.5" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="98.41" y="159.5" ></text>
</g>
<g >
<title>runtime.futex (1 samples, 0.04%)</title><rect x="97.2" y="101" width="0.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="100.21" y="111.5" ></text>
</g>
<g >
<title>runtime.handoff (2 samples, 0.08%)</title><rect x="12.7" y="149" width="0.9" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="15.70" y="159.5" ></text>
</g>
<g >
<title>runtime.forEachPInternal (1 samples, 0.04%)</title><rect x="10.4" y="165" width="0.5" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="13.45" y="175.5" ></text>
</g>
<g >
<title>runtime.scanblock (11 samples, 0.42%)</title><rect x="15.8" y="133" width="5.0" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="18.84" y="143.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).alloc (1 samples, 0.04%)</title><rect x="1180.6" y="69" width="0.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1183.56" y="79.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).next (1 samples, 0.04%)</title><rect x="13.6" y="117" width="0.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="16.60" y="127.5" ></text>
</g>
<g >
<title>runtime.bgsweep (1 samples, 0.04%)</title><rect x="10.0" y="229" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>runtime.(*pageAlloc).find (1 samples, 0.04%)</title><rect x="1180.6" y="53" width="0.4" height="15.0" fill="rgb(254,225,54)" rx="2" ry="2" />
<text  x="1183.56" y="63.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (1 samples, 0.04%)</title><rect x="10.4" y="149" width="0.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="13.45" y="159.5" ></text>
</g>
<g >
<title>runtime.procyield (2 samples, 0.08%)</title><rect x="99.0" y="165" width="0.9" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="102.01" y="175.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (9 samples, 0.34%)</title><rect x="95.9" y="213" width="4.0" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="98.86" y="223.5" ></text>
</g>
<g >
<title>runtime.gcResetMarkState (1 samples, 0.04%)</title><rect x="1181.5" y="117" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1184.46" y="127.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (3 samples, 0.11%)</title><rect x="98.6" y="197" width="1.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="101.56" y="207.5" ></text>
</g>
<g >
<title>runtime.startm (2 samples, 0.08%)</title><rect x="97.7" y="165" width="0.9" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="100.66" y="175.5" ></text>
</g>
<g >
<title>runtime.unlockWithRank (1 samples, 0.04%)</title><rect x="1181.0" y="85" width="0.5" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1184.01" y="95.5" ></text>
</g>
<g >
<title>runtime.getempty (1 samples, 0.04%)</title><rect x="13.1" y="133" width="0.5" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="16.15" y="143.5" ></text>
</g>
<g >
<title>runtime.scanframeworker (4 samples, 0.15%)</title><rect x="14.0" y="117" width="1.8" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="17.05" y="127.5" ></text>
</g>
<g >
<title>memeqbody (121 samples, 4.61%)</title><rect x="1088.0" y="165" width="54.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1090.96" y="175.5" >memeq..</text>
</g>
<g >
<title>runtime.scanobject (4 samples, 0.15%)</title><rect x="90.5" y="165" width="1.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="93.46" y="175.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (1 samples, 0.04%)</title><rect x="11.3" y="165" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="14.35" y="175.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointers (14 samples, 0.53%)</title><rect x="1182.8" y="133" width="6.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1185.81" y="143.5" ></text>
</g>
<g >
<title>syscall.pread (59 samples, 2.25%)</title><rect x="1154.0" y="149" width="26.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1157.04" y="159.5" >s..</text>
</g>
<g >
<title>runtime.funcspdelta (1 samples, 0.04%)</title><rect x="13.6" y="101" width="0.4" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="16.60" y="111.5" ></text>
</g>
<g >
<title>runtime.gcDrainMarkWorkerIdle (6 samples, 0.23%)</title><rect x="90.5" y="197" width="2.7" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="93.46" y="207.5" ></text>
</g>
<g >
<title>runtime.mProf_Malloc (1 samples, 0.04%)</title><rect x="1189.6" y="133" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1192.55" y="143.5" ></text>
</g>
<g >
<title>runtime.startTheWorldWithSema (1 samples, 0.04%)</title><rect x="10.9" y="149" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="13.90" y="159.5" ></text>
</g>
<g >
<title>syscall.Syscall6 (59 samples, 2.25%)</title><rect x="1154.0" y="133" width="26.6" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1157.04" y="143.5" >s..</text>
</g>
<g >
<title>runtime.pcvalue (1 samples, 0.04%)</title><rect x="13.6" y="85" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="16.60" y="95.5" ></text>
</g>
<g >
<title>brc/cmd.TestMain (2,425 samples, 92.38%)</title><rect x="99.9" y="213" width="1090.1" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="102.90" y="223.5" >brc/cmd.TestMain</text>
</g>
<g >
<title>runtime.pageIndexOf (1 samples, 0.04%)</title><rect x="15.4" y="85" width="0.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="18.39" y="95.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).reset (2 samples, 0.08%)</title><rect x="1181.9" y="85" width="0.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1184.91" y="95.5" ></text>
</g>
<g >
<title>runtime.signalM (2 samples, 0.08%)</title><rect x="11.8" y="117" width="0.9" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="14.80" y="127.5" ></text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.11%)</title><rect x="98.6" y="181" width="1.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="101.56" y="191.5" ></text>
</g>
<g >
<title>runtime.mPark (3 samples, 0.11%)</title><rect x="93.6" y="165" width="1.4" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="96.61" y="175.5" ></text>
</g>
<g >
<title>runtime.addb (12 samples, 0.46%)</title><rect x="50.5" y="149" width="5.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="53.46" y="159.5" ></text>
</g>
<g >
<title>os.(*File).pread (59 samples, 2.25%)</title><rect x="1154.0" y="181" width="26.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1157.04" y="191.5" >o..</text>
</g>
<g >
<title>runtime.futex (2 samples, 0.08%)</title><rect x="97.7" y="117" width="0.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="100.66" y="127.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.08%)</title><rect x="97.7" y="149" width="0.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="100.66" y="159.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (1 samples, 0.04%)</title><rect x="90.0" y="149" width="0.5" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="93.02" y="159.5" ></text>
</g>
<g >
<title>runtime.markrootBlock (11 samples, 0.42%)</title><rect x="15.8" y="149" width="5.0" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="18.84" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (35 samples, 1.33%)</title><rect x="730.6" y="133" width="15.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="733.59" y="143.5" ></text>
</g>
<g >
<title>runtime.lock2 (1 samples, 0.04%)</title><rect x="95.4" y="165" width="0.5" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="98.41" y="175.5" ></text>
</g>
<g >
<title>runtime.(*moduledata).textAddr (1 samples, 0.04%)</title><rect x="14.5" y="85" width="0.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="17.50" y="95.5" ></text>
</g>
<g >
<title>runtime.systemstack (181 samples, 6.90%)</title><rect x="11.8" y="213" width="81.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="14.80" y="223.5" >runtime.s..</text>
</g>
<g >
<title>runtime.wbBufFlush1 (1 samples, 0.04%)</title><rect x="10.4" y="133" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="13.45" y="143.5" ></text>
</g>
<g >
<title>runtime.tgkill (2 samples, 0.08%)</title><rect x="11.8" y="101" width="0.9" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="14.80" y="111.5" ></text>
</g>
<g >
<title>runtime.(*mspan).heapBitsSmallForAddr (2 samples, 0.08%)</title><rect x="49.6" y="133" width="0.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="52.56" y="143.5" ></text>
</g>
<g >
<title>runtime.(*mcache).allocLarge (2 samples, 0.08%)</title><rect x="1180.6" y="149" width="0.9" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1183.56" y="159.5" ></text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.04%)</title><rect x="10.4" y="213" width="0.5" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="13.45" y="223.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (1 samples, 0.04%)</title><rect x="90.0" y="165" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="93.02" y="175.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush.func1 (35 samples, 1.33%)</title><rect x="730.6" y="117" width="15.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="733.59" y="127.5" ></text>
</g>
<g >
<title>runtime.gcDrain (6 samples, 0.23%)</title><rect x="90.5" y="181" width="2.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="93.46" y="191.5" ></text>
</g>
<g >
<title>runtime.forEachG (1 samples, 0.04%)</title><rect x="1181.5" y="101" width="0.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1184.46" y="111.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (2 samples, 0.08%)</title><rect x="96.3" y="133" width="0.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="99.31" y="143.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.04%)</title><rect x="10.4" y="117" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="13.45" y="127.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.04%)</title><rect x="11.3" y="149" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="14.35" y="159.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (2 samples, 0.08%)</title><rect x="91.4" y="149" width="0.9" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="94.36" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="1189.6" y="101" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1192.55" y="111.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker (184 samples, 7.01%)</title><rect x="10.4" y="229" width="82.8" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="13.45" y="239.5" >runtime.g..</text>
</g>
<g >
<title>runtime.notewakeup (1 samples, 0.04%)</title><rect x="97.2" y="133" width="0.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="100.21" y="143.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination.func3 (1 samples, 0.04%)</title><rect x="10.9" y="165" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="13.90" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptM (2 samples, 0.08%)</title><rect x="11.8" y="133" width="0.9" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="14.80" y="143.5" ></text>
</g>
<g >
<title>runtime.memclrNoHeapPointersChunked (14 samples, 0.53%)</title><rect x="1182.8" y="149" width="6.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1185.81" y="159.5" ></text>
</g>
<g >
<title>runtime.unlock2 (1 samples, 0.04%)</title><rect x="1181.0" y="69" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1184.01" y="79.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc.func1 (2 samples, 0.08%)</title><rect x="1180.6" y="101" width="0.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1183.56" y="111.5" ></text>
</g>
<g >
<title>runtime.schedule (4 samples, 0.15%)</title><rect x="95.9" y="181" width="1.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="98.86" y="191.5" ></text>
</g>
<g >
<title>runtime.schedule (6 samples, 0.23%)</title><rect x="93.2" y="197" width="2.7" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="96.16" y="207.5" ></text>
</g>
<g >
<title>runtime.memequal (26 samples, 0.99%)</title><rect x="1142.4" y="165" width="11.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1145.35" y="175.5" ></text>
</g>
<g >
<title>runtime/internal/syscall.Syscall6 (58 samples, 2.21%)</title><rect x="1154.5" y="101" width="26.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1157.49" y="111.5" >r..</text>
</g>
<g >
<title>runtime.(*sweepLocked).sweep (1 samples, 0.04%)</title><rect x="10.0" y="197" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>runtime.scanblock (2 samples, 0.08%)</title><rect x="14.9" y="101" width="0.9" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="17.94" y="111.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (2 samples, 0.08%)</title><rect x="96.3" y="117" width="0.9" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="99.31" y="127.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (1 samples, 0.04%)</title><rect x="97.2" y="117" width="0.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="100.21" y="127.5" ></text>
</g>
<g >
<title>runtime.(*mspan).heapBitsSmallForAddr (1 samples, 0.04%)</title><rect x="90.5" y="133" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="93.46" y="143.5" ></text>
</g>
<g >
<title>runtime.arenaIndex (1 samples, 0.04%)</title><rect x="90.9" y="149" width="0.5" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="93.91" y="159.5" ></text>
</g>
<g >
<title>runtime.scanobject (152 samples, 5.79%)</title><rect x="21.7" y="165" width="68.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="24.69" y="175.5" >runtime..</text>
</g>
<g >
<title>runtime.gcMarkDone (2 samples, 0.08%)</title><rect x="10.9" y="213" width="0.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="13.90" y="223.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="1189.1" y="149" width="0.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1192.10" y="159.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (6 samples, 0.23%)</title><rect x="95.9" y="197" width="2.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="98.86" y="207.5" ></text>
</g>
<g >
<title>runtime.gcResetMarkState.func1 (1 samples, 0.04%)</title><rect x="1181.5" y="85" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1184.46" y="95.5" ></text>
</g>
<g >
<title>runtime.findObject (24 samples, 0.91%)</title><rect x="733.7" y="85" width="10.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="736.73" y="95.5" ></text>
</g>
<g >
<title>runtime.(*spanSet).push (1 samples, 0.04%)</title><rect x="10.0" y="181" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.08%)</title><rect x="1180.6" y="117" width="0.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1183.56" y="127.5" ></text>
</g>
<g >
<title>runtime.(*gcBits).bitp (1 samples, 0.04%)</title><rect x="730.6" y="101" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="733.59" y="111.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func3 (1 samples, 0.04%)</title><rect x="11.3" y="181" width="0.5" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="14.35" y="191.5" ></text>
</g>
<g >
<title>runtime.profilealloc (1 samples, 0.04%)</title><rect x="1189.6" y="149" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1192.55" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mspan).typePointersOfUnchecked (2 samples, 0.08%)</title><rect x="49.6" y="149" width="0.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="52.56" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mspan).divideByElemSize (1 samples, 0.04%)</title><rect x="96.3" y="101" width="0.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="99.31" y="111.5" ></text>
</g>
<g >
<title>runtime.mallocgc (21 samples, 0.80%)</title><rect x="1180.6" y="165" width="9.4" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1183.56" y="175.5" ></text>
</g>
<g >
<title>runtime.(*unwinder).next (1 samples, 0.04%)</title><rect x="1189.6" y="53" width="0.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1192.55" y="63.5" ></text>
</g>
<g >
<title>runtime.markrootSpans (1 samples, 0.04%)</title><rect x="20.8" y="149" width="0.4" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="23.79" y="159.5" ></text>
</g>
<g >
<title>runtime.typePointers.next (50 samples, 1.90%)</title><rect x="58.5" y="149" width="22.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="61.55" y="159.5" >r..</text>
</g>
<g >
<title>runtime.spanOf (4 samples, 0.15%)</title><rect x="744.5" y="85" width="1.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="747.52" y="95.5" ></text>
</g>
<g >
<title>syscall.RawSyscall6 (58 samples, 2.21%)</title><rect x="1154.5" y="117" width="26.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1157.49" y="127.5" >s..</text>
</g>
<g >
<title>testing.tRunner (2,425 samples, 92.38%)</title><rect x="99.9" y="229" width="1090.1" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="102.90" y="239.5" >testing.tRunner</text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.04%)</title><rect x="90.0" y="117" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="93.02" y="127.5" ></text>
</g>
<g >
<title>syscall.Pread (59 samples, 2.25%)</title><rect x="1154.0" y="165" width="26.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1157.04" y="175.5" >s..</text>
</g>
<g >
<title>runtime.typePointers.nextFast (20 samples, 0.76%)</title><rect x="81.0" y="149" width="9.0" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="84.02" y="159.5" ></text>
</g>
<g >
<title>runtime.findObject (1 samples, 0.04%)</title><rect x="96.8" y="101" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="99.76" y="111.5" ></text>
</g>
<g >
<title>runtime.findRunnable (4 samples, 0.15%)</title><rect x="93.6" y="181" width="1.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="96.61" y="191.5" ></text>
</g>
<g >
<title>github.com/cespare/xxhash.Sum64 (596 samples, 22.70%)</title><rect x="746.3" y="165" width="267.9" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="749.32" y="175.5" >github.com/cespare/xxhash.Sum64</text>
</g>
<g >
<title>runtime.sweepone (1 samples, 0.04%)</title><rect x="10.0" y="213" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>runtime.gcMarkTermination (1 samples, 0.04%)</title><rect x="10.9" y="197" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="13.90" y="207.5" ></text>
</g>
<g >
<title>runtime.futexsleep (3 samples, 0.11%)</title><rect x="93.6" y="133" width="1.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="96.61" y="143.5" ></text>
</g>
<g >
<title>runtime.morestack (9 samples, 0.34%)</title><rect x="95.9" y="229" width="4.0" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="98.86" y="239.5" ></text>
</g>
<g >
<title>runtime.callers.func1 (1 samples, 0.04%)</title><rect x="1189.6" y="85" width="0.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1192.55" y="95.5" ></text>
</g>
<g >
<title>runtime.scanstack (5 samples, 0.19%)</title><rect x="13.6" y="133" width="2.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="16.60" y="143.5" ></text>
</g>
<g >
<title>runtime.tracebackPCs (1 samples, 0.04%)</title><rect x="1189.6" y="69" width="0.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.55" y="79.5" ></text>
</g>
<g >
<title>runtime.(*lfstack).pop (1 samples, 0.04%)</title><rect x="12.7" y="133" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="15.70" y="143.5" ></text>
</g>
<g >
<title>runtime.procresize (1 samples, 0.04%)</title><rect x="10.9" y="133" width="0.4" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="13.90" y="143.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.04%)</title><rect x="95.4" y="181" width="0.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="98.41" y="191.5" ></text>
</g>
<g >
<title>runtime.markroot (17 samples, 0.65%)</title><rect x="13.6" y="165" width="7.6" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="16.60" y="175.5" ></text>
</g>
<g >
<title>runtime.runSafePointFn (3 samples, 0.11%)</title><rect x="96.3" y="149" width="1.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="99.31" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="10.9" y="181" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="13.90" y="191.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (1 samples, 0.04%)</title><rect x="1154.0" y="117" width="0.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1157.04" y="127.5" ></text>
</g>
<g >
<title>runtime.readUintptr (1 samples, 0.04%)</title><rect x="57.2" y="149" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="60.20" y="159.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="95.9" y="149" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="98.86" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mLockProfile).recordUnlock (1 samples, 0.04%)</title><rect x="1181.0" y="53" width="0.5" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1184.01" y="63.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (33 samples, 1.26%)</title><rect x="731.5" y="101" width="14.8" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="734.49" y="111.5" ></text>
</g>
<g >
<title>runtime.(*lfstack).empty (1 samples, 0.04%)</title><rect x="93.2" y="181" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="96.16" y="191.5" ></text>
</g>
<g >
<title>bytes.Equal (311 samples, 11.85%)</title><rect x="1014.2" y="181" width="139.8" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1017.24" y="191.5" >bytes.Equal</text>
</g>
<g >
<title>runtime.notesleep (3 samples, 0.11%)</title><rect x="93.6" y="149" width="1.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="96.61" y="159.5" ></text>
</g>
<g >
<title>brc/cmd.createFixedPoint (243 samples, 9.26%)</title><rect x="99.9" y="197" width="109.2" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="102.90" y="207.5" >brc/cmd.creat..</text>
</g>
<g >
<title>runtime.typePointers.nextFast (2 samples, 0.08%)</title><rect x="92.3" y="165" width="0.9" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="95.26" y="175.5" ></text>
</g>
<g >
<title>runtime.mcall (6 samples, 0.23%)</title><rect x="93.2" y="229" width="2.7" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="96.16" y="239.5" ></text>
</g>
<g >
<title>runtime.(*stkframe).getStackMap (1 samples, 0.04%)</title><rect x="14.0" y="101" width="0.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="17.05" y="111.5" ></text>
</g>
<g >
<title>runtime.greyobject (1 samples, 0.04%)</title><rect x="14.9" y="85" width="0.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="17.94" y="95.5" ></text>
</g>
<g >
<title>runtime.wakep (2 samples, 0.08%)</title><rect x="97.7" y="181" width="0.9" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="100.66" y="191.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush1 (1 samples, 0.04%)</title><rect x="90.0" y="133" width="0.5" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="93.02" y="143.5" ></text>
</g>
<g >
<title>runtime.funcInfo.entry (1 samples, 0.04%)</title><rect x="14.5" y="101" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="17.50" y="111.5" ></text>
</g>
<g >
<title>runtime.findObject (3 samples, 0.11%)</title><rect x="55.9" y="149" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="58.85" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.04%)</title><rect x="10.4" y="197" width="0.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="13.45" y="207.5" ></text>
</g>
<g >
<title>runtime.(*mheap).alloc (2 samples, 0.08%)</title><rect x="1180.6" y="133" width="0.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1183.56" y="143.5" ></text>
</g>
<g >
<title>runtime.spanOf (2 samples, 0.08%)</title><rect x="57.6" y="149" width="0.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="60.65" y="159.5" ></text>
</g>
<g >
<title>all (2,625 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>runtime.futexwakeup (2 samples, 0.08%)</title><rect x="97.7" y="133" width="0.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="100.66" y="143.5" ></text>
</g>
<g >
<title>runtime.finishsweep_m (2 samples, 0.08%)</title><rect x="1181.9" y="101" width="0.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1184.91" y="111.5" ></text>
</g>
<g >
<title>runtime.wbBufFlush (35 samples, 1.33%)</title><rect x="730.6" y="149" width="15.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="733.59" y="159.5" ></text>
</g>
<g >
<title>runtime.(*mheap).allocSpan (1 samples, 0.04%)</title><rect x="1180.6" y="85" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1183.56" y="95.5" ></text>
</g>
<g >
<title>runtime.futex (3 samples, 0.11%)</title><rect x="93.6" y="117" width="1.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="96.61" y="127.5" ></text>
</g>
<g >
<title>runtime.callers (1 samples, 0.04%)</title><rect x="1189.6" y="117" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1192.55" y="127.5" ></text>
</g>
<g >
<title>runtime.nanotime (1 samples, 0.04%)</title><rect x="95.0" y="165" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="97.96" y="175.5" ></text>
</g>
<g >
<title>runtime.systemstack (3 samples, 0.11%)</title><rect x="1181.5" y="133" width="1.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1184.46" y="143.5" ></text>
</g>
<g >
<title>runtime.(*gcControllerState).enlistWorker (2 samples, 0.08%)</title><rect x="11.8" y="149" width="0.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="14.80" y="159.5" ></text>
</g>
<g >
<title>runtime.markroot.func1 (5 samples, 0.19%)</title><rect x="13.6" y="149" width="2.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="16.60" y="159.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.forEachP.func5 (1 samples, 0.04%)</title><rect x="10.4" y="181" width="0.5" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="13.45" y="191.5" ></text>
</g>
<g >
<title>runtime.findRunnable (4 samples, 0.15%)</title><rect x="95.9" y="165" width="1.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="98.86" y="175.5" ></text>
</g>
<g >
<title>runtime.findfunc (1 samples, 0.04%)</title><rect x="1189.6" y="37" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1192.55" y="47.5" ></text>
</g>
<g >
<title>runtime.gcStart (3 samples, 0.11%)</title><rect x="1181.5" y="149" width="1.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1184.46" y="159.5" ></text>
</g>
</g>
</svg>
